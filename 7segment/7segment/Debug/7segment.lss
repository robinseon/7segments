
7segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800200  00000a5a  00000aee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008002b2  008002b2  00000ba0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001043  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d59  00000000  00000000  00001cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d7  00000000  00000000  00002a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  00003124  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064b  00000000  00000000  00003310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a2  00000000  00000000  0000395b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003efd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	af c2       	rjmp	.+1374   	; 0x5a4 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	aa c0       	rjmp	.+340    	; 0x1ca <__vector_29>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	a8 c2       	rjmp	.+1360   	; 0x5fa <__vector_42>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e5       	ldi	r30, 0x5A	; 90
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 3b       	cpi	r26, 0xB2	; 178
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 eb       	ldi	r26, 0xB2	; 178
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a0 3c       	cpi	r26, 0xC0	; 192
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	99 d2       	rcall	.+1330   	; 0x652 <main>
 120:	9a c4       	rjmp	.+2356   	; 0xa56 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <adc_init>:
int16_t temp;

void adc_init()
{
	// Select input:PK7 is ADC15
	DDRK &= ~_BV(PK7);
 124:	e7 e0       	ldi	r30, 0x07	; 7
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	80 81       	ld	r24, Z
 12a:	8f 77       	andi	r24, 0x7F	; 127
 12c:	80 83       	st	Z, r24
	
	//Select Output
	DDRG |= _BV(PG0);
 12e:	83 b3       	in	r24, 0x13	; 19
 130:	81 60       	ori	r24, 0x01	; 1
 132:	83 bb       	out	0x13, r24	; 19

	// And select channel 15 and Set AVCC with external capacitor at AREF pin
	ADMUX |= _BV(REFS0) | _BV(MUX2) | _BV(MUX1) | _BV(MUX0);
 134:	ec e7       	ldi	r30, 0x7C	; 124
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	87 64       	ori	r24, 0x47	; 71
 13c:	80 83       	st	Z, r24
	ADCSRB |= _BV(MUX5);
 13e:	eb e7       	ldi	r30, 0x7B	; 123
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	88 60       	ori	r24, 0x08	; 8
 146:	80 83       	st	Z, r24

	//auto trigger source
	ADCSRB |= _BV(ADTS2) | _BV(ADTS0);
 148:	80 81       	ld	r24, Z
 14a:	85 60       	ori	r24, 0x05	; 5
 14c:	80 83       	st	Z, r24
	
	//enable auto trigger, choose prescaler : 128, enable ADC and enable interrupt
	ADCSRA |= _BV(ADEN) | _BV(ADATE) | _BV(ADIE) | _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2);
 14e:	ea e7       	ldi	r30, 0x7A	; 122
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	8f 6a       	ori	r24, 0xAF	; 175
 156:	80 83       	st	Z, r24
	
	
	PORTG |= _BV(PG0);
 158:	84 b3       	in	r24, 0x14	; 20
 15a:	81 60       	ori	r24, 0x01	; 1
 15c:	84 bb       	out	0x14, r24	; 20
 15e:	08 95       	ret

00000160 <adc_read>:
	
}

void adc_read()
{
	ADCSRA |= _BV(ADSC);  /* Start the ADC conversion by setting ADSC bit */
 160:	ea e7       	ldi	r30, 0x7A	; 122
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	80 64       	ori	r24, 0x40	; 64
 168:	80 83       	st	Z, r24
	
	/* Wait till the conversion is over */
	while(ADCSRA&(1<<ADSC))
 16a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 16e:	86 fd       	sbrc	r24, 6
 170:	fc cf       	rjmp	.-8      	; 0x16a <adc_read+0xa>
	{

	}
}
 172:	08 95       	ret

00000174 <temp_convertToCelcius>:

int16_t temp_convertToCelcius()
{
	degree=((((float)ADC*50/1024)*100)-500)/10;//ADC on 2^10 bits so a resolution of 1024. Vref=5V and use the formula : (Vin-500)/10 with Vin=ADC*5/1024
 174:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 178:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	6a d3       	rcall	.+1748   	; 0x856 <__floatunsisf>
 182:	20 e0       	ldi	r18, 0x00	; 0
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	48 e4       	ldi	r20, 0x48	; 72
 188:	52 e4       	ldi	r21, 0x42	; 66
 18a:	f3 d3       	rcall	.+2022   	; 0x972 <__mulsf3>
 18c:	20 e0       	ldi	r18, 0x00	; 0
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	40 e8       	ldi	r20, 0x80	; 128
 192:	5a e3       	ldi	r21, 0x3A	; 58
 194:	ee d3       	rcall	.+2012   	; 0x972 <__mulsf3>
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	48 ec       	ldi	r20, 0xC8	; 200
 19c:	52 e4       	ldi	r21, 0x42	; 66
 19e:	e9 d3       	rcall	.+2002   	; 0x972 <__mulsf3>
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	4a ef       	ldi	r20, 0xFA	; 250
 1a6:	53 e4       	ldi	r21, 0x43	; 67
 1a8:	58 d2       	rcall	.+1200   	; 0x65a <__subsf3>
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	40 e2       	ldi	r20, 0x20	; 32
 1b0:	51 e4       	ldi	r21, 0x41	; 65
 1b2:	b8 d2       	rcall	.+1392   	; 0x724 <__divsf3>
 1b4:	60 93 b4 02 	sts	0x02B4, r22	; 0x8002b4 <degree>
 1b8:	70 93 b5 02 	sts	0x02B5, r23	; 0x8002b5 <degree+0x1>
 1bc:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <degree+0x2>
 1c0:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <degree+0x3>
	int16_t temp = (int16_t)degree;//force to INT
 1c4:	17 d3       	rcall	.+1582   	; 0x7f4 <__fixsfsi>
 1c6:	cb 01       	movw	r24, r22
	return(temp);
}
 1c8:	08 95       	ret

000001ca <__vector_29>:
 1ca:	1f 92       	push	r1

//Interrupt ADC --> result of the conversion
ISR(ADC_vect){
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	0b b6       	in	r0, 0x3b	; 59
 1d6:	0f 92       	push	r0
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
	sample=ADC;
 1f0:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 1f4:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	2c d3       	rcall	.+1624   	; 0x856 <__floatunsisf>
 1fe:	60 93 b8 02 	sts	0x02B8, r22	; 0x8002b8 <sample>
 202:	70 93 b9 02 	sts	0x02B9, r23	; 0x8002b9 <sample+0x1>
 206:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <sample+0x2>
 20a:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <sample+0x3>
 20e:	ff 91       	pop	r31
 210:	ef 91       	pop	r30
 212:	bf 91       	pop	r27
 214:	af 91       	pop	r26
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	7f 91       	pop	r23
 21c:	6f 91       	pop	r22
 21e:	5f 91       	pop	r21
 220:	4f 91       	pop	r20
 222:	3f 91       	pop	r19
 224:	2f 91       	pop	r18
 226:	0f 90       	pop	r0
 228:	0b be       	out	0x3b, r0	; 59
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <time_init>:

void time_init(void)
{
	//Timer
	// set up timer with prescaler = 8 (no prescaler) and CTC mode
	TCCR1B |= _BV(WGM12)| _BV(CS11);
 234:	e1 e8       	ldi	r30, 0x81	; 129
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	8a 60       	ori	r24, 0x0A	; 10
 23c:	80 83       	st	Z, r24
	
	// initialize counter
	TCNT1 = 0;
 23e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
 242:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	
	// initialize compare value
	OCR1A = 9999;
 246:	8f e0       	ldi	r24, 0x0F	; 15
 248:	97 e2       	ldi	r25, 0x27	; 39
 24a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 24e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	
	// enable compare interrupt
	TIMSK1 |= _BV(OCIE1A);
 252:	ef e6       	ldi	r30, 0x6F	; 111
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	82 60       	ori	r24, 0x02	; 2
 25a:	80 83       	st	Z, r24
	
	//enable timer2
	// set up timer with prescaler = 8 (no prescaler) and CTC mode
	TCCR4B |= _BV(WGM42)| _BV(CS42);
 25c:	e1 ea       	ldi	r30, 0xA1	; 161
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	8c 60       	ori	r24, 0x0C	; 12
 264:	80 83       	st	Z, r24
	
	// initialize compare value
	OCR4A = 31249;
 266:	81 e1       	ldi	r24, 0x11	; 17
 268:	9a e7       	ldi	r25, 0x7A	; 122
 26a:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
 26e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	
	// enable compare interrupt
	TIMSK4 |= _BV(OCIE4A);
 272:	e2 e7       	ldi	r30, 0x72	; 114
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	82 60       	ori	r24, 0x02	; 2
 27a:	80 83       	st	Z, r24
	
	// enable global interrupts
	sei();
 27c:	78 94       	sei
 27e:	08 95       	ret

00000280 <init_display>:
}

void init_display()
{
	//RCK-->PB0 and when the 8 segments are good, SCK-->PB1 for each segment and SI-->PB2 for the value
	DDRB |= _BV(RCK) | _BV(SCK) | _BV(SI);
 280:	84 b1       	in	r24, 0x04	; 4
 282:	87 60       	ori	r24, 0x07	; 7
 284:	84 b9       	out	0x04, r24	; 4
	//D1-->PF0, D2-->PF1, D3-->PF2, D4-->PF3,
	DDRF |= _BV(D1) | _BV(D2) | _BV(D3) | _BV(D4);
 286:	80 b3       	in	r24, 0x10	; 16
 288:	8f 60       	ori	r24, 0x0F	; 15
 28a:	80 bb       	out	0x10, r24	; 16
	
	PORTB &= ~(_BV(RCK) | _BV(SCK) | _BV(SI));
 28c:	85 b1       	in	r24, 0x05	; 5
 28e:	88 7f       	andi	r24, 0xF8	; 248
 290:	85 b9       	out	0x05, r24	; 5
	PORTF |= _BV(D1) | _BV(D2) | _BV(D3) | _BV(D4);
 292:	81 b3       	in	r24, 0x11	; 17
 294:	8f 60       	ori	r24, 0x0F	; 15
 296:	81 bb       	out	0x11, r24	; 17
	
	DDRA=0xFF;
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	81 b9       	out	0x01, r24	; 1
	PORTA=0xFF;
 29c:	82 b9       	out	0x02, r24	; 2
 29e:	08 95       	ret

000002a0 <printint_1u>:
}

uint16_t printint_1u(uint16_t value)
{
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	ac 01       	movw	r20, r24
	uint16_t dig1, dig2, dig3, dig4;
	dig1=value/1000;
 2aa:	ec 01       	movw	r28, r24
 2ac:	d6 95       	lsr	r29
 2ae:	c7 95       	ror	r28
 2b0:	d6 95       	lsr	r29
 2b2:	c7 95       	ror	r28
 2b4:	d6 95       	lsr	r29
 2b6:	c7 95       	ror	r28
 2b8:	9e 01       	movw	r18, r28
 2ba:	a5 ec       	ldi	r26, 0xC5	; 197
 2bc:	b0 e2       	ldi	r27, 0x20	; 32
 2be:	bc d3       	rcall	.+1912   	; 0xa38 <__umulhisi3>
 2c0:	fc 01       	movw	r30, r24
 2c2:	f2 95       	swap	r31
 2c4:	e2 95       	swap	r30
 2c6:	ef 70       	andi	r30, 0x0F	; 15
 2c8:	ef 27       	eor	r30, r31
 2ca:	ff 70       	andi	r31, 0x0F	; 15
 2cc:	ef 27       	eor	r30, r31
	dig2=(value%1000)/100;
 2ce:	28 ee       	ldi	r18, 0xE8	; 232
 2d0:	33 e0       	ldi	r19, 0x03	; 3
 2d2:	e2 9f       	mul	r30, r18
 2d4:	c0 01       	movw	r24, r0
 2d6:	e3 9f       	mul	r30, r19
 2d8:	90 0d       	add	r25, r0
 2da:	f2 9f       	mul	r31, r18
 2dc:	90 0d       	add	r25, r0
 2de:	11 24       	eor	r1, r1
 2e0:	9a 01       	movw	r18, r20
 2e2:	28 1b       	sub	r18, r24
 2e4:	39 0b       	sbc	r19, r25
 2e6:	36 95       	lsr	r19
 2e8:	27 95       	ror	r18
 2ea:	36 95       	lsr	r19
 2ec:	27 95       	ror	r18
 2ee:	ab e7       	ldi	r26, 0x7B	; 123
 2f0:	b4 e1       	ldi	r27, 0x14	; 20
 2f2:	a2 d3       	rcall	.+1860   	; 0xa38 <__umulhisi3>
 2f4:	ec 01       	movw	r28, r24
 2f6:	d6 95       	lsr	r29
 2f8:	c7 95       	ror	r28
	dig3=(value%100)/10;
 2fa:	9a 01       	movw	r18, r20
 2fc:	36 95       	lsr	r19
 2fe:	27 95       	ror	r18
 300:	36 95       	lsr	r19
 302:	27 95       	ror	r18
 304:	99 d3       	rcall	.+1842   	; 0xa38 <__umulhisi3>
 306:	9c 01       	movw	r18, r24
 308:	36 95       	lsr	r19
 30a:	27 95       	ror	r18
 30c:	64 e6       	ldi	r22, 0x64	; 100
 30e:	62 9f       	mul	r22, r18
 310:	c0 01       	movw	r24, r0
 312:	63 9f       	mul	r22, r19
 314:	90 0d       	add	r25, r0
 316:	11 24       	eor	r1, r1
 318:	9a 01       	movw	r18, r20
 31a:	28 1b       	sub	r18, r24
 31c:	39 0b       	sbc	r19, r25
 31e:	ad ec       	ldi	r26, 0xCD	; 205
 320:	bc ec       	ldi	r27, 0xCC	; 204
 322:	8a d3       	rcall	.+1812   	; 0xa38 <__umulhisi3>
 324:	8c 01       	movw	r16, r24
 326:	16 95       	lsr	r17
 328:	07 95       	ror	r16
 32a:	16 95       	lsr	r17
 32c:	07 95       	ror	r16
 32e:	16 95       	lsr	r17
	dig4=value%10;
 330:	07 95       	ror	r16
 332:	9a 01       	movw	r18, r20
 334:	81 d3       	rcall	.+1794   	; 0xa38 <__umulhisi3>
 336:	96 95       	lsr	r25
 338:	87 95       	ror	r24
 33a:	96 95       	lsr	r25
 33c:	87 95       	ror	r24
 33e:	96 95       	lsr	r25
 340:	87 95       	ror	r24
 342:	9c 01       	movw	r18, r24
 344:	22 0f       	add	r18, r18
 346:	33 1f       	adc	r19, r19
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	82 0f       	add	r24, r18
 356:	93 1f       	adc	r25, r19
 358:	9a 01       	movw	r18, r20
 35a:	28 1b       	sub	r18, r24
 35c:	39 0b       	sbc	r19, r25
 35e:	c9 01       	movw	r24, r18
	
	if(digit==4)
 360:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 364:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 368:	24 30       	cpi	r18, 0x04	; 4
 36a:	31 05       	cpc	r19, r1
 36c:	91 f0       	breq	.+36     	; 0x392 <printint_1u+0xf2>
	{
		return dig4;
	}
	if(digit==3)
 36e:	23 30       	cpi	r18, 0x03	; 3
 370:	31 05       	cpc	r19, r1
 372:	39 f0       	breq	.+14     	; 0x382 <printint_1u+0xe2>
	{
		return dig3;
	}
	if(digit==2)
 374:	22 30       	cpi	r18, 0x02	; 2
 376:	31 05       	cpc	r19, r1
 378:	39 f0       	breq	.+14     	; 0x388 <printint_1u+0xe8>
	{
		return dig2;
	}
	if(digit==1)
 37a:	21 30       	cpi	r18, 0x01	; 1
 37c:	31 05       	cpc	r19, r1
 37e:	39 f0       	breq	.+14     	; 0x38e <printint_1u+0xee>
	{
		return dig1;
	}
}
 380:	08 c0       	rjmp	.+16     	; 0x392 <printint_1u+0xf2>
	{
		return dig4;
	}
	if(digit==3)
	{
		return dig3;
 382:	80 2f       	mov	r24, r16
 384:	91 2f       	mov	r25, r17
 386:	05 c0       	rjmp	.+10     	; 0x392 <printint_1u+0xf2>
	}
	if(digit==2)
	{
		return dig2;
 388:	8c 2f       	mov	r24, r28
 38a:	9d 2f       	mov	r25, r29
 38c:	02 c0       	rjmp	.+4      	; 0x392 <printint_1u+0xf2>
	}
	if(digit==1)
	{
		return dig1;
 38e:	8e 2f       	mov	r24, r30
 390:	9f 2f       	mov	r25, r31
	}
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	1f 91       	pop	r17
 398:	0f 91       	pop	r16
 39a:	08 95       	ret

0000039c <printint_4u>:

void printint_4u(uint16_t value)
{
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
 3a4:	c0 5c       	subi	r28, 0xC0	; 192
 3a6:	d1 09       	sbc	r29, r1
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	f8 94       	cli
 3ac:	de bf       	out	0x3e, r29	; 62
 3ae:	0f be       	out	0x3f, r0	; 63
 3b0:	cd bf       	out	0x3d, r28	; 61
	//Array to display
	int display[8];
	//Array for each number
	int numbers [11][8] = {
 3b2:	20 eb       	ldi	r18, 0xB0	; 176
 3b4:	e2 e0       	ldi	r30, 0x02	; 2
 3b6:	f2 e0       	ldi	r31, 0x02	; 2
 3b8:	de 01       	movw	r26, r28
 3ba:	51 96       	adiw	r26, 0x11	; 17
 3bc:	01 90       	ld	r0, Z+
 3be:	0d 92       	st	X+, r0
 3c0:	2a 95       	dec	r18
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <printint_4u+0x20>
		{1,1,1,1,1,0,0,0},
		{1,0,0,0,0,0,0,0},
		{1,0,0,1,0,0,0,0},
		{1,0,0,0,0,1,1,0}
	};
	if (value>9999)
 3c4:	80 31       	cpi	r24, 0x10	; 16
 3c6:	27 e2       	ldi	r18, 0x27	; 39
 3c8:	92 07       	cpc	r25, r18
 3ca:	b8 f4       	brcc	.+46     	; 0x3fa <printint_4u+0x5e>
 3cc:	1f c0       	rjmp	.+62     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	{
		for (int i=0; i<8;i++)
		{
			display[i] = numbers[10][i];
 3ce:	fc 01       	movw	r30, r24
 3d0:	e0 5b       	subi	r30, 0xB0	; 176
 3d2:	ff 4f       	sbci	r31, 0xFF	; 255
 3d4:	ee 0f       	add	r30, r30
 3d6:	ff 1f       	adc	r31, r31
 3d8:	41 e0       	ldi	r20, 0x01	; 1
 3da:	50 e0       	ldi	r21, 0x00	; 0
 3dc:	4c 0f       	add	r20, r28
 3de:	5d 1f       	adc	r21, r29
 3e0:	e4 0f       	add	r30, r20
 3e2:	f5 1f       	adc	r31, r21
 3e4:	20 89       	ldd	r18, Z+16	; 0x10
 3e6:	31 89       	ldd	r19, Z+17	; 0x11
 3e8:	fc 01       	movw	r30, r24
 3ea:	ee 0f       	add	r30, r30
 3ec:	ff 1f       	adc	r31, r31
 3ee:	e4 0f       	add	r30, r20
 3f0:	f5 1f       	adc	r31, r21
 3f2:	31 83       	std	Z+1, r19	; 0x01
 3f4:	20 83       	st	Z, r18
		{1,0,0,1,0,0,0,0},
		{1,0,0,0,0,1,1,0}
	};
	if (value>9999)
	{
		for (int i=0; i<8;i++)
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <printint_4u+0x62>
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	88 30       	cpi	r24, 0x08	; 8
 400:	91 05       	cpc	r25, r1
 402:	2c f3       	brlt	.-54     	; 0x3ce <printint_4u+0x32>
		{
			display[i] = numbers[10][i];
		}
		PORTF &= ~(_BV(D1) | _BV(D2) | _BV(D3) | _BV(D4));
 404:	81 b3       	in	r24, 0x11	; 17
 406:	80 7f       	andi	r24, 0xF0	; 240
 408:	81 bb       	out	0x11, r24	; 17
 40a:	9b c0       	rjmp	.+310    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
	}
	else
	{
		uint16_t todisplay=printint_1u(value);
 40c:	49 df       	rcall	.-366    	; 0x2a0 <printint_1u>

		PORTF |= _BV(D1) | _BV(D2) | _BV(D3) | _BV(D4);
 40e:	21 b3       	in	r18, 0x11	; 17
 410:	2f 60       	ori	r18, 0x0F	; 15
 412:	21 bb       	out	0x11, r18	; 17
		

		for (int i=0; i<8;i++)
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	1c c0       	rjmp	.+56     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		{
			display[i] = numbers[todisplay][i];
 41a:	fc 01       	movw	r30, r24
 41c:	ee 0f       	add	r30, r30
 41e:	ff 1f       	adc	r31, r31
 420:	ee 0f       	add	r30, r30
 422:	ff 1f       	adc	r31, r31
 424:	ee 0f       	add	r30, r30
 426:	ff 1f       	adc	r31, r31
 428:	e2 0f       	add	r30, r18
 42a:	f3 1f       	adc	r31, r19
 42c:	ee 0f       	add	r30, r30
 42e:	ff 1f       	adc	r31, r31
 430:	61 e0       	ldi	r22, 0x01	; 1
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	6c 0f       	add	r22, r28
 436:	7d 1f       	adc	r23, r29
 438:	e6 0f       	add	r30, r22
 43a:	f7 1f       	adc	r31, r23
 43c:	40 89       	ldd	r20, Z+16	; 0x10
 43e:	51 89       	ldd	r21, Z+17	; 0x11
 440:	f9 01       	movw	r30, r18
 442:	ee 0f       	add	r30, r30
 444:	ff 1f       	adc	r31, r31
 446:	e6 0f       	add	r30, r22
 448:	f7 1f       	adc	r31, r23
 44a:	51 83       	std	Z+1, r21	; 0x01
 44c:	40 83       	st	Z, r20
		uint16_t todisplay=printint_1u(value);

		PORTF |= _BV(D1) | _BV(D2) | _BV(D3) | _BV(D4);
		

		for (int i=0; i<8;i++)
 44e:	2f 5f       	subi	r18, 0xFF	; 255
 450:	3f 4f       	sbci	r19, 0xFF	; 255
 452:	28 30       	cpi	r18, 0x08	; 8
 454:	31 05       	cpc	r19, r1
 456:	0c f3       	brlt	.-62     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
		{
			display[i] = numbers[todisplay][i];
		}
		
		if (digit==1)
 458:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 45c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 460:	21 30       	cpi	r18, 0x01	; 1
 462:	31 05       	cpc	r19, r1
 464:	01 f5       	brne	.+64     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
		{
			if (todisplay==0)
 466:	89 2b       	or	r24, r25
 468:	69 f4       	brne	.+26     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
			{
				digit++;
 46a:	2f 5f       	subi	r18, 0xFF	; 255
 46c:	3f 4f       	sbci	r19, 0xFF	; 255
 46e:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 472:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
				firstvalue=1;
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <firstvalue+0x1>
 47e:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <firstvalue>
 482:	5f c0       	rjmp	.+190    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
			}
			else
			{
				PORTF &= ~_BV(D1);
 484:	81 b3       	in	r24, 0x11	; 17
 486:	8e 7f       	andi	r24, 0xFE	; 254
 488:	81 bb       	out	0x11, r24	; 17
				digit++;
 48a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 48e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 492:	01 96       	adiw	r24, 0x01	; 1
 494:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 498:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
				firstvalue=0;
 49c:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <firstvalue+0x1>
 4a0:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <firstvalue>
 4a4:	4e c0       	rjmp	.+156    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
			}
		}
		else if (digit==2)
 4a6:	22 30       	cpi	r18, 0x02	; 2
 4a8:	31 05       	cpc	r19, r1
 4aa:	e1 f4       	brne	.+56     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
		{
			if (todisplay==0&&firstvalue==1)
 4ac:	89 2b       	or	r24, r25
 4ae:	69 f4       	brne	.+26     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
 4b0:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <firstvalue>
 4b4:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <firstvalue+0x1>
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	39 f4       	brne	.+14     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
			{
				digit++;
 4bc:	2f 5f       	subi	r18, 0xFF	; 255
 4be:	3f 4f       	sbci	r19, 0xFF	; 255
 4c0:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 4c4:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
 4c8:	3c c0       	rjmp	.+120    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
			}
			else
			{
				PORTF &= ~_BV(D2);
 4ca:	81 b3       	in	r24, 0x11	; 17
 4cc:	8d 7f       	andi	r24, 0xFD	; 253
 4ce:	81 bb       	out	0x11, r24	; 17
				digit++;
 4d0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 4d4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 4d8:	01 96       	adiw	r24, 0x01	; 1
 4da:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 4de:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 4e2:	2f c0       	rjmp	.+94     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
			}
		}
		else if (digit==3)
 4e4:	23 30       	cpi	r18, 0x03	; 3
 4e6:	31 05       	cpc	r19, r1
 4e8:	e1 f4       	brne	.+56     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
		{
			if (todisplay==0&&firstvalue==1)
 4ea:	89 2b       	or	r24, r25
 4ec:	69 f4       	brne	.+26     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
 4ee:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <firstvalue>
 4f2:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <firstvalue+0x1>
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	39 f4       	brne	.+14     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
			{
				digit++;
 4fa:	2f 5f       	subi	r18, 0xFF	; 255
 4fc:	3f 4f       	sbci	r19, 0xFF	; 255
 4fe:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 502:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <__DATA_REGION_ORIGIN__>
 506:	1d c0       	rjmp	.+58     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
			}
			else
			{
				PORTF &= ~_BV(D3);
 508:	81 b3       	in	r24, 0x11	; 17
 50a:	8b 7f       	andi	r24, 0xFB	; 251
 50c:	81 bb       	out	0x11, r24	; 17
				digit++;
 50e:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 512:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 516:	01 96       	adiw	r24, 0x01	; 1
 518:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 51c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 520:	10 c0       	rjmp	.+32     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
			}
		}
		else if (digit==4)
 522:	24 30       	cpi	r18, 0x04	; 4
 524:	31 05       	cpc	r19, r1
 526:	69 f4       	brne	.+26     	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
		{
			PORTF &= ~_BV(D4);
 528:	81 b3       	in	r24, 0x11	; 17
 52a:	87 7f       	andi	r24, 0xF7	; 247
 52c:	81 bb       	out	0x11, r24	; 17
			digit=1;
 52e:	81 e0       	ldi	r24, 0x01	; 1
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 536:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
			firstvalue=0;
 53a:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <firstvalue+0x1>
 53e:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <firstvalue>
		}
	}
		
		//turn off to be at 0
		PORTB &= ~_BV(RCK);
 542:	85 b1       	in	r24, 0x05	; 5
 544:	8e 7f       	andi	r24, 0xFE	; 254
 546:	85 b9       	out	0x05, r24	; 5

		for(int i=0; i<8; i++)
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	1b c0       	rjmp	.+54     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
		{

			if(display[i]==0)
 54e:	fc 01       	movw	r30, r24
 550:	ee 0f       	add	r30, r30
 552:	ff 1f       	adc	r31, r31
 554:	21 e0       	ldi	r18, 0x01	; 1
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	2c 0f       	add	r18, r28
 55a:	3d 1f       	adc	r19, r29
 55c:	e2 0f       	add	r30, r18
 55e:	f3 1f       	adc	r31, r19
 560:	20 81       	ld	r18, Z
 562:	31 81       	ldd	r19, Z+1	; 0x01
 564:	23 2b       	or	r18, r19
 566:	21 f4       	brne	.+8      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
			{
				PORTB &= ~_BV(SI);
 568:	25 b1       	in	r18, 0x05	; 5
 56a:	2b 7f       	andi	r18, 0xFB	; 251
 56c:	25 b9       	out	0x05, r18	; 5
 56e:	03 c0       	rjmp	.+6      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
			}
			else
			{
				PORTB |= _BV(SI);
 570:	25 b1       	in	r18, 0x05	; 5
 572:	24 60       	ori	r18, 0x04	; 4
 574:	25 b9       	out	0x05, r18	; 5
			}
			//turn on and turn off each time to have the rising
			PORTB |= _BV(SCK);
 576:	25 b1       	in	r18, 0x05	; 5
 578:	22 60       	ori	r18, 0x02	; 2
 57a:	25 b9       	out	0x05, r18	; 5
			PORTB &= ~_BV(SCK);
 57c:	25 b1       	in	r18, 0x05	; 5
 57e:	2d 7f       	andi	r18, 0xFD	; 253
 580:	25 b9       	out	0x05, r18	; 5
	}
		
		//turn off to be at 0
		PORTB &= ~_BV(RCK);

		for(int i=0; i<8; i++)
 582:	01 96       	adiw	r24, 0x01	; 1
 584:	88 30       	cpi	r24, 0x08	; 8
 586:	91 05       	cpc	r25, r1
 588:	14 f3       	brlt	.-60     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
			}
			//turn on and turn off each time to have the rising
			PORTB |= _BV(SCK);
			PORTB &= ~_BV(SCK);
		}
		PORTB |= _BV(RCK);
 58a:	85 b1       	in	r24, 0x05	; 5
 58c:	81 60       	ori	r24, 0x01	; 1
 58e:	85 b9       	out	0x05, r24	; 5
}
 590:	c0 54       	subi	r28, 0x40	; 64
 592:	df 4f       	sbci	r29, 0xFF	; 255
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	f8 94       	cli
 598:	de bf       	out	0x3e, r29	; 62
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	cd bf       	out	0x3d, r28	; 61
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	08 95       	ret

000005a4 <__vector_17>:

//Interrupt Time each 10 millisecond
ISR(TIMER1_COMPA_vect)
{
 5a4:	1f 92       	push	r1
 5a6:	0f 92       	push	r0
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	0f 92       	push	r0
 5ac:	11 24       	eor	r1, r1
 5ae:	0b b6       	in	r0, 0x3b	; 59
 5b0:	0f 92       	push	r0
 5b2:	2f 93       	push	r18
 5b4:	3f 93       	push	r19
 5b6:	4f 93       	push	r20
 5b8:	5f 93       	push	r21
 5ba:	6f 93       	push	r22
 5bc:	7f 93       	push	r23
 5be:	8f 93       	push	r24
 5c0:	9f 93       	push	r25
 5c2:	af 93       	push	r26
 5c4:	bf 93       	push	r27
 5c6:	ef 93       	push	r30
 5c8:	ff 93       	push	r31
	
	printint_4u(temperature);
 5ca:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <temperature>
 5ce:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <temperature+0x1>
 5d2:	e4 de       	rcall	.-568    	; 0x39c <printint_4u>
	
}
 5d4:	ff 91       	pop	r31
 5d6:	ef 91       	pop	r30
 5d8:	bf 91       	pop	r27
 5da:	af 91       	pop	r26
 5dc:	9f 91       	pop	r25
 5de:	8f 91       	pop	r24
 5e0:	7f 91       	pop	r23
 5e2:	6f 91       	pop	r22
 5e4:	5f 91       	pop	r21
 5e6:	4f 91       	pop	r20
 5e8:	3f 91       	pop	r19
 5ea:	2f 91       	pop	r18
 5ec:	0f 90       	pop	r0
 5ee:	0b be       	out	0x3b, r0	; 59
 5f0:	0f 90       	pop	r0
 5f2:	0f be       	out	0x3f, r0	; 63
 5f4:	0f 90       	pop	r0
 5f6:	1f 90       	pop	r1
 5f8:	18 95       	reti

000005fa <__vector_42>:

ISR(TIMER4_COMPA_vect)
{
 5fa:	1f 92       	push	r1
 5fc:	0f 92       	push	r0
 5fe:	0f b6       	in	r0, 0x3f	; 63
 600:	0f 92       	push	r0
 602:	11 24       	eor	r1, r1
 604:	0b b6       	in	r0, 0x3b	; 59
 606:	0f 92       	push	r0
 608:	2f 93       	push	r18
 60a:	3f 93       	push	r19
 60c:	4f 93       	push	r20
 60e:	5f 93       	push	r21
 610:	6f 93       	push	r22
 612:	7f 93       	push	r23
 614:	8f 93       	push	r24
 616:	9f 93       	push	r25
 618:	af 93       	push	r26
 61a:	bf 93       	push	r27
 61c:	ef 93       	push	r30
 61e:	ff 93       	push	r31
	adc_read();
 620:	9f dd       	rcall	.-1218   	; 0x160 <adc_read>
	temperature=temp_convertToCelcius();
 622:	a8 dd       	rcall	.-1200   	; 0x174 <temp_convertToCelcius>
 624:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <temperature+0x1>
 628:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <temperature>
 62c:	ff 91       	pop	r31
 62e:	ef 91       	pop	r30
 630:	bf 91       	pop	r27
 632:	af 91       	pop	r26
 634:	9f 91       	pop	r25
 636:	8f 91       	pop	r24
 638:	7f 91       	pop	r23
 63a:	6f 91       	pop	r22
 63c:	5f 91       	pop	r21
 63e:	4f 91       	pop	r20
 640:	3f 91       	pop	r19
 642:	2f 91       	pop	r18
 644:	0f 90       	pop	r0
 646:	0b be       	out	0x3b, r0	; 59
 648:	0f 90       	pop	r0
 64a:	0f be       	out	0x3f, r0	; 63
 64c:	0f 90       	pop	r0
 64e:	1f 90       	pop	r1
 650:	18 95       	reti

00000652 <main>:
#include "Display/adc.h"
#include <avr/interrupt.h>

int main(void)
{
	init_display();
 652:	16 de       	rcall	.-980    	; 0x280 <init_display>
	adc_init();
 654:	67 dd       	rcall	.-1330   	; 0x124 <adc_init>
	time_init();
 656:	ee dd       	rcall	.-1060   	; 0x234 <time_init>
 658:	ff cf       	rjmp	.-2      	; 0x658 <main+0x6>

0000065a <__subsf3>:
 65a:	50 58       	subi	r21, 0x80	; 128

0000065c <__addsf3>:
 65c:	bb 27       	eor	r27, r27
 65e:	aa 27       	eor	r26, r26
 660:	0e d0       	rcall	.+28     	; 0x67e <__addsf3x>
 662:	4d c1       	rjmp	.+666    	; 0x8fe <__fp_round>
 664:	3e d1       	rcall	.+636    	; 0x8e2 <__fp_pscA>
 666:	30 f0       	brcs	.+12     	; 0x674 <__addsf3+0x18>
 668:	43 d1       	rcall	.+646    	; 0x8f0 <__fp_pscB>
 66a:	20 f0       	brcs	.+8      	; 0x674 <__addsf3+0x18>
 66c:	31 f4       	brne	.+12     	; 0x67a <__addsf3+0x1e>
 66e:	9f 3f       	cpi	r25, 0xFF	; 255
 670:	11 f4       	brne	.+4      	; 0x676 <__addsf3+0x1a>
 672:	1e f4       	brtc	.+6      	; 0x67a <__addsf3+0x1e>
 674:	33 c1       	rjmp	.+614    	; 0x8dc <__fp_nan>
 676:	0e f4       	brtc	.+2      	; 0x67a <__addsf3+0x1e>
 678:	e0 95       	com	r30
 67a:	e7 fb       	bst	r30, 7
 67c:	29 c1       	rjmp	.+594    	; 0x8d0 <__fp_inf>

0000067e <__addsf3x>:
 67e:	e9 2f       	mov	r30, r25
 680:	4f d1       	rcall	.+670    	; 0x920 <__fp_split3>
 682:	80 f3       	brcs	.-32     	; 0x664 <__addsf3+0x8>
 684:	ba 17       	cp	r27, r26
 686:	62 07       	cpc	r22, r18
 688:	73 07       	cpc	r23, r19
 68a:	84 07       	cpc	r24, r20
 68c:	95 07       	cpc	r25, r21
 68e:	18 f0       	brcs	.+6      	; 0x696 <__addsf3x+0x18>
 690:	71 f4       	brne	.+28     	; 0x6ae <__addsf3x+0x30>
 692:	9e f5       	brtc	.+102    	; 0x6fa <__addsf3x+0x7c>
 694:	67 c1       	rjmp	.+718    	; 0x964 <__fp_zero>
 696:	0e f4       	brtc	.+2      	; 0x69a <__addsf3x+0x1c>
 698:	e0 95       	com	r30
 69a:	0b 2e       	mov	r0, r27
 69c:	ba 2f       	mov	r27, r26
 69e:	a0 2d       	mov	r26, r0
 6a0:	0b 01       	movw	r0, r22
 6a2:	b9 01       	movw	r22, r18
 6a4:	90 01       	movw	r18, r0
 6a6:	0c 01       	movw	r0, r24
 6a8:	ca 01       	movw	r24, r20
 6aa:	a0 01       	movw	r20, r0
 6ac:	11 24       	eor	r1, r1
 6ae:	ff 27       	eor	r31, r31
 6b0:	59 1b       	sub	r21, r25
 6b2:	99 f0       	breq	.+38     	; 0x6da <__addsf3x+0x5c>
 6b4:	59 3f       	cpi	r21, 0xF9	; 249
 6b6:	50 f4       	brcc	.+20     	; 0x6cc <__addsf3x+0x4e>
 6b8:	50 3e       	cpi	r21, 0xE0	; 224
 6ba:	68 f1       	brcs	.+90     	; 0x716 <__addsf3x+0x98>
 6bc:	1a 16       	cp	r1, r26
 6be:	f0 40       	sbci	r31, 0x00	; 0
 6c0:	a2 2f       	mov	r26, r18
 6c2:	23 2f       	mov	r18, r19
 6c4:	34 2f       	mov	r19, r20
 6c6:	44 27       	eor	r20, r20
 6c8:	58 5f       	subi	r21, 0xF8	; 248
 6ca:	f3 cf       	rjmp	.-26     	; 0x6b2 <__addsf3x+0x34>
 6cc:	46 95       	lsr	r20
 6ce:	37 95       	ror	r19
 6d0:	27 95       	ror	r18
 6d2:	a7 95       	ror	r26
 6d4:	f0 40       	sbci	r31, 0x00	; 0
 6d6:	53 95       	inc	r21
 6d8:	c9 f7       	brne	.-14     	; 0x6cc <__addsf3x+0x4e>
 6da:	7e f4       	brtc	.+30     	; 0x6fa <__addsf3x+0x7c>
 6dc:	1f 16       	cp	r1, r31
 6de:	ba 0b       	sbc	r27, r26
 6e0:	62 0b       	sbc	r22, r18
 6e2:	73 0b       	sbc	r23, r19
 6e4:	84 0b       	sbc	r24, r20
 6e6:	ba f0       	brmi	.+46     	; 0x716 <__addsf3x+0x98>
 6e8:	91 50       	subi	r25, 0x01	; 1
 6ea:	a1 f0       	breq	.+40     	; 0x714 <__addsf3x+0x96>
 6ec:	ff 0f       	add	r31, r31
 6ee:	bb 1f       	adc	r27, r27
 6f0:	66 1f       	adc	r22, r22
 6f2:	77 1f       	adc	r23, r23
 6f4:	88 1f       	adc	r24, r24
 6f6:	c2 f7       	brpl	.-16     	; 0x6e8 <__addsf3x+0x6a>
 6f8:	0e c0       	rjmp	.+28     	; 0x716 <__addsf3x+0x98>
 6fa:	ba 0f       	add	r27, r26
 6fc:	62 1f       	adc	r22, r18
 6fe:	73 1f       	adc	r23, r19
 700:	84 1f       	adc	r24, r20
 702:	48 f4       	brcc	.+18     	; 0x716 <__addsf3x+0x98>
 704:	87 95       	ror	r24
 706:	77 95       	ror	r23
 708:	67 95       	ror	r22
 70a:	b7 95       	ror	r27
 70c:	f7 95       	ror	r31
 70e:	9e 3f       	cpi	r25, 0xFE	; 254
 710:	08 f0       	brcs	.+2      	; 0x714 <__addsf3x+0x96>
 712:	b3 cf       	rjmp	.-154    	; 0x67a <__addsf3+0x1e>
 714:	93 95       	inc	r25
 716:	88 0f       	add	r24, r24
 718:	08 f0       	brcs	.+2      	; 0x71c <__addsf3x+0x9e>
 71a:	99 27       	eor	r25, r25
 71c:	ee 0f       	add	r30, r30
 71e:	97 95       	ror	r25
 720:	87 95       	ror	r24
 722:	08 95       	ret

00000724 <__divsf3>:
 724:	0c d0       	rcall	.+24     	; 0x73e <__divsf3x>
 726:	eb c0       	rjmp	.+470    	; 0x8fe <__fp_round>
 728:	e3 d0       	rcall	.+454    	; 0x8f0 <__fp_pscB>
 72a:	40 f0       	brcs	.+16     	; 0x73c <__divsf3+0x18>
 72c:	da d0       	rcall	.+436    	; 0x8e2 <__fp_pscA>
 72e:	30 f0       	brcs	.+12     	; 0x73c <__divsf3+0x18>
 730:	21 f4       	brne	.+8      	; 0x73a <__divsf3+0x16>
 732:	5f 3f       	cpi	r21, 0xFF	; 255
 734:	19 f0       	breq	.+6      	; 0x73c <__divsf3+0x18>
 736:	cc c0       	rjmp	.+408    	; 0x8d0 <__fp_inf>
 738:	51 11       	cpse	r21, r1
 73a:	15 c1       	rjmp	.+554    	; 0x966 <__fp_szero>
 73c:	cf c0       	rjmp	.+414    	; 0x8dc <__fp_nan>

0000073e <__divsf3x>:
 73e:	f0 d0       	rcall	.+480    	; 0x920 <__fp_split3>
 740:	98 f3       	brcs	.-26     	; 0x728 <__divsf3+0x4>

00000742 <__divsf3_pse>:
 742:	99 23       	and	r25, r25
 744:	c9 f3       	breq	.-14     	; 0x738 <__divsf3+0x14>
 746:	55 23       	and	r21, r21
 748:	b1 f3       	breq	.-20     	; 0x736 <__divsf3+0x12>
 74a:	95 1b       	sub	r25, r21
 74c:	55 0b       	sbc	r21, r21
 74e:	bb 27       	eor	r27, r27
 750:	aa 27       	eor	r26, r26
 752:	62 17       	cp	r22, r18
 754:	73 07       	cpc	r23, r19
 756:	84 07       	cpc	r24, r20
 758:	38 f0       	brcs	.+14     	; 0x768 <__divsf3_pse+0x26>
 75a:	9f 5f       	subi	r25, 0xFF	; 255
 75c:	5f 4f       	sbci	r21, 0xFF	; 255
 75e:	22 0f       	add	r18, r18
 760:	33 1f       	adc	r19, r19
 762:	44 1f       	adc	r20, r20
 764:	aa 1f       	adc	r26, r26
 766:	a9 f3       	breq	.-22     	; 0x752 <__divsf3_pse+0x10>
 768:	33 d0       	rcall	.+102    	; 0x7d0 <__divsf3_pse+0x8e>
 76a:	0e 2e       	mov	r0, r30
 76c:	3a f0       	brmi	.+14     	; 0x77c <__divsf3_pse+0x3a>
 76e:	e0 e8       	ldi	r30, 0x80	; 128
 770:	30 d0       	rcall	.+96     	; 0x7d2 <__divsf3_pse+0x90>
 772:	91 50       	subi	r25, 0x01	; 1
 774:	50 40       	sbci	r21, 0x00	; 0
 776:	e6 95       	lsr	r30
 778:	00 1c       	adc	r0, r0
 77a:	ca f7       	brpl	.-14     	; 0x76e <__divsf3_pse+0x2c>
 77c:	29 d0       	rcall	.+82     	; 0x7d0 <__divsf3_pse+0x8e>
 77e:	fe 2f       	mov	r31, r30
 780:	27 d0       	rcall	.+78     	; 0x7d0 <__divsf3_pse+0x8e>
 782:	66 0f       	add	r22, r22
 784:	77 1f       	adc	r23, r23
 786:	88 1f       	adc	r24, r24
 788:	bb 1f       	adc	r27, r27
 78a:	26 17       	cp	r18, r22
 78c:	37 07       	cpc	r19, r23
 78e:	48 07       	cpc	r20, r24
 790:	ab 07       	cpc	r26, r27
 792:	b0 e8       	ldi	r27, 0x80	; 128
 794:	09 f0       	breq	.+2      	; 0x798 <__divsf3_pse+0x56>
 796:	bb 0b       	sbc	r27, r27
 798:	80 2d       	mov	r24, r0
 79a:	bf 01       	movw	r22, r30
 79c:	ff 27       	eor	r31, r31
 79e:	93 58       	subi	r25, 0x83	; 131
 7a0:	5f 4f       	sbci	r21, 0xFF	; 255
 7a2:	2a f0       	brmi	.+10     	; 0x7ae <__divsf3_pse+0x6c>
 7a4:	9e 3f       	cpi	r25, 0xFE	; 254
 7a6:	51 05       	cpc	r21, r1
 7a8:	68 f0       	brcs	.+26     	; 0x7c4 <__divsf3_pse+0x82>
 7aa:	92 c0       	rjmp	.+292    	; 0x8d0 <__fp_inf>
 7ac:	dc c0       	rjmp	.+440    	; 0x966 <__fp_szero>
 7ae:	5f 3f       	cpi	r21, 0xFF	; 255
 7b0:	ec f3       	brlt	.-6      	; 0x7ac <__divsf3_pse+0x6a>
 7b2:	98 3e       	cpi	r25, 0xE8	; 232
 7b4:	dc f3       	brlt	.-10     	; 0x7ac <__divsf3_pse+0x6a>
 7b6:	86 95       	lsr	r24
 7b8:	77 95       	ror	r23
 7ba:	67 95       	ror	r22
 7bc:	b7 95       	ror	r27
 7be:	f7 95       	ror	r31
 7c0:	9f 5f       	subi	r25, 0xFF	; 255
 7c2:	c9 f7       	brne	.-14     	; 0x7b6 <__divsf3_pse+0x74>
 7c4:	88 0f       	add	r24, r24
 7c6:	91 1d       	adc	r25, r1
 7c8:	96 95       	lsr	r25
 7ca:	87 95       	ror	r24
 7cc:	97 f9       	bld	r25, 7
 7ce:	08 95       	ret
 7d0:	e1 e0       	ldi	r30, 0x01	; 1
 7d2:	66 0f       	add	r22, r22
 7d4:	77 1f       	adc	r23, r23
 7d6:	88 1f       	adc	r24, r24
 7d8:	bb 1f       	adc	r27, r27
 7da:	62 17       	cp	r22, r18
 7dc:	73 07       	cpc	r23, r19
 7de:	84 07       	cpc	r24, r20
 7e0:	ba 07       	cpc	r27, r26
 7e2:	20 f0       	brcs	.+8      	; 0x7ec <__divsf3_pse+0xaa>
 7e4:	62 1b       	sub	r22, r18
 7e6:	73 0b       	sbc	r23, r19
 7e8:	84 0b       	sbc	r24, r20
 7ea:	ba 0b       	sbc	r27, r26
 7ec:	ee 1f       	adc	r30, r30
 7ee:	88 f7       	brcc	.-30     	; 0x7d2 <__divsf3_pse+0x90>
 7f0:	e0 95       	com	r30
 7f2:	08 95       	ret

000007f4 <__fixsfsi>:
 7f4:	04 d0       	rcall	.+8      	; 0x7fe <__fixunssfsi>
 7f6:	68 94       	set
 7f8:	b1 11       	cpse	r27, r1
 7fa:	b5 c0       	rjmp	.+362    	; 0x966 <__fp_szero>
 7fc:	08 95       	ret

000007fe <__fixunssfsi>:
 7fe:	98 d0       	rcall	.+304    	; 0x930 <__fp_splitA>
 800:	88 f0       	brcs	.+34     	; 0x824 <__fixunssfsi+0x26>
 802:	9f 57       	subi	r25, 0x7F	; 127
 804:	90 f0       	brcs	.+36     	; 0x82a <__fixunssfsi+0x2c>
 806:	b9 2f       	mov	r27, r25
 808:	99 27       	eor	r25, r25
 80a:	b7 51       	subi	r27, 0x17	; 23
 80c:	a0 f0       	brcs	.+40     	; 0x836 <__fixunssfsi+0x38>
 80e:	d1 f0       	breq	.+52     	; 0x844 <__fixunssfsi+0x46>
 810:	66 0f       	add	r22, r22
 812:	77 1f       	adc	r23, r23
 814:	88 1f       	adc	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	1a f0       	brmi	.+6      	; 0x820 <__fixunssfsi+0x22>
 81a:	ba 95       	dec	r27
 81c:	c9 f7       	brne	.-14     	; 0x810 <__fixunssfsi+0x12>
 81e:	12 c0       	rjmp	.+36     	; 0x844 <__fixunssfsi+0x46>
 820:	b1 30       	cpi	r27, 0x01	; 1
 822:	81 f0       	breq	.+32     	; 0x844 <__fixunssfsi+0x46>
 824:	9f d0       	rcall	.+318    	; 0x964 <__fp_zero>
 826:	b1 e0       	ldi	r27, 0x01	; 1
 828:	08 95       	ret
 82a:	9c c0       	rjmp	.+312    	; 0x964 <__fp_zero>
 82c:	67 2f       	mov	r22, r23
 82e:	78 2f       	mov	r23, r24
 830:	88 27       	eor	r24, r24
 832:	b8 5f       	subi	r27, 0xF8	; 248
 834:	39 f0       	breq	.+14     	; 0x844 <__fixunssfsi+0x46>
 836:	b9 3f       	cpi	r27, 0xF9	; 249
 838:	cc f3       	brlt	.-14     	; 0x82c <__fixunssfsi+0x2e>
 83a:	86 95       	lsr	r24
 83c:	77 95       	ror	r23
 83e:	67 95       	ror	r22
 840:	b3 95       	inc	r27
 842:	d9 f7       	brne	.-10     	; 0x83a <__fixunssfsi+0x3c>
 844:	3e f4       	brtc	.+14     	; 0x854 <__fixunssfsi+0x56>
 846:	90 95       	com	r25
 848:	80 95       	com	r24
 84a:	70 95       	com	r23
 84c:	61 95       	neg	r22
 84e:	7f 4f       	sbci	r23, 0xFF	; 255
 850:	8f 4f       	sbci	r24, 0xFF	; 255
 852:	9f 4f       	sbci	r25, 0xFF	; 255
 854:	08 95       	ret

00000856 <__floatunsisf>:
 856:	e8 94       	clt
 858:	09 c0       	rjmp	.+18     	; 0x86c <__floatsisf+0x12>

0000085a <__floatsisf>:
 85a:	97 fb       	bst	r25, 7
 85c:	3e f4       	brtc	.+14     	; 0x86c <__floatsisf+0x12>
 85e:	90 95       	com	r25
 860:	80 95       	com	r24
 862:	70 95       	com	r23
 864:	61 95       	neg	r22
 866:	7f 4f       	sbci	r23, 0xFF	; 255
 868:	8f 4f       	sbci	r24, 0xFF	; 255
 86a:	9f 4f       	sbci	r25, 0xFF	; 255
 86c:	99 23       	and	r25, r25
 86e:	a9 f0       	breq	.+42     	; 0x89a <__floatsisf+0x40>
 870:	f9 2f       	mov	r31, r25
 872:	96 e9       	ldi	r25, 0x96	; 150
 874:	bb 27       	eor	r27, r27
 876:	93 95       	inc	r25
 878:	f6 95       	lsr	r31
 87a:	87 95       	ror	r24
 87c:	77 95       	ror	r23
 87e:	67 95       	ror	r22
 880:	b7 95       	ror	r27
 882:	f1 11       	cpse	r31, r1
 884:	f8 cf       	rjmp	.-16     	; 0x876 <__floatsisf+0x1c>
 886:	fa f4       	brpl	.+62     	; 0x8c6 <__floatsisf+0x6c>
 888:	bb 0f       	add	r27, r27
 88a:	11 f4       	brne	.+4      	; 0x890 <__floatsisf+0x36>
 88c:	60 ff       	sbrs	r22, 0
 88e:	1b c0       	rjmp	.+54     	; 0x8c6 <__floatsisf+0x6c>
 890:	6f 5f       	subi	r22, 0xFF	; 255
 892:	7f 4f       	sbci	r23, 0xFF	; 255
 894:	8f 4f       	sbci	r24, 0xFF	; 255
 896:	9f 4f       	sbci	r25, 0xFF	; 255
 898:	16 c0       	rjmp	.+44     	; 0x8c6 <__floatsisf+0x6c>
 89a:	88 23       	and	r24, r24
 89c:	11 f0       	breq	.+4      	; 0x8a2 <__floatsisf+0x48>
 89e:	96 e9       	ldi	r25, 0x96	; 150
 8a0:	11 c0       	rjmp	.+34     	; 0x8c4 <__floatsisf+0x6a>
 8a2:	77 23       	and	r23, r23
 8a4:	21 f0       	breq	.+8      	; 0x8ae <__floatsisf+0x54>
 8a6:	9e e8       	ldi	r25, 0x8E	; 142
 8a8:	87 2f       	mov	r24, r23
 8aa:	76 2f       	mov	r23, r22
 8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <__floatsisf+0x5e>
 8ae:	66 23       	and	r22, r22
 8b0:	71 f0       	breq	.+28     	; 0x8ce <__floatsisf+0x74>
 8b2:	96 e8       	ldi	r25, 0x86	; 134
 8b4:	86 2f       	mov	r24, r22
 8b6:	70 e0       	ldi	r23, 0x00	; 0
 8b8:	60 e0       	ldi	r22, 0x00	; 0
 8ba:	2a f0       	brmi	.+10     	; 0x8c6 <__floatsisf+0x6c>
 8bc:	9a 95       	dec	r25
 8be:	66 0f       	add	r22, r22
 8c0:	77 1f       	adc	r23, r23
 8c2:	88 1f       	adc	r24, r24
 8c4:	da f7       	brpl	.-10     	; 0x8bc <__floatsisf+0x62>
 8c6:	88 0f       	add	r24, r24
 8c8:	96 95       	lsr	r25
 8ca:	87 95       	ror	r24
 8cc:	97 f9       	bld	r25, 7
 8ce:	08 95       	ret

000008d0 <__fp_inf>:
 8d0:	97 f9       	bld	r25, 7
 8d2:	9f 67       	ori	r25, 0x7F	; 127
 8d4:	80 e8       	ldi	r24, 0x80	; 128
 8d6:	70 e0       	ldi	r23, 0x00	; 0
 8d8:	60 e0       	ldi	r22, 0x00	; 0
 8da:	08 95       	ret

000008dc <__fp_nan>:
 8dc:	9f ef       	ldi	r25, 0xFF	; 255
 8de:	80 ec       	ldi	r24, 0xC0	; 192
 8e0:	08 95       	ret

000008e2 <__fp_pscA>:
 8e2:	00 24       	eor	r0, r0
 8e4:	0a 94       	dec	r0
 8e6:	16 16       	cp	r1, r22
 8e8:	17 06       	cpc	r1, r23
 8ea:	18 06       	cpc	r1, r24
 8ec:	09 06       	cpc	r0, r25
 8ee:	08 95       	ret

000008f0 <__fp_pscB>:
 8f0:	00 24       	eor	r0, r0
 8f2:	0a 94       	dec	r0
 8f4:	12 16       	cp	r1, r18
 8f6:	13 06       	cpc	r1, r19
 8f8:	14 06       	cpc	r1, r20
 8fa:	05 06       	cpc	r0, r21
 8fc:	08 95       	ret

000008fe <__fp_round>:
 8fe:	09 2e       	mov	r0, r25
 900:	03 94       	inc	r0
 902:	00 0c       	add	r0, r0
 904:	11 f4       	brne	.+4      	; 0x90a <__fp_round+0xc>
 906:	88 23       	and	r24, r24
 908:	52 f0       	brmi	.+20     	; 0x91e <__fp_round+0x20>
 90a:	bb 0f       	add	r27, r27
 90c:	40 f4       	brcc	.+16     	; 0x91e <__fp_round+0x20>
 90e:	bf 2b       	or	r27, r31
 910:	11 f4       	brne	.+4      	; 0x916 <__fp_round+0x18>
 912:	60 ff       	sbrs	r22, 0
 914:	04 c0       	rjmp	.+8      	; 0x91e <__fp_round+0x20>
 916:	6f 5f       	subi	r22, 0xFF	; 255
 918:	7f 4f       	sbci	r23, 0xFF	; 255
 91a:	8f 4f       	sbci	r24, 0xFF	; 255
 91c:	9f 4f       	sbci	r25, 0xFF	; 255
 91e:	08 95       	ret

00000920 <__fp_split3>:
 920:	57 fd       	sbrc	r21, 7
 922:	90 58       	subi	r25, 0x80	; 128
 924:	44 0f       	add	r20, r20
 926:	55 1f       	adc	r21, r21
 928:	59 f0       	breq	.+22     	; 0x940 <__fp_splitA+0x10>
 92a:	5f 3f       	cpi	r21, 0xFF	; 255
 92c:	71 f0       	breq	.+28     	; 0x94a <__fp_splitA+0x1a>
 92e:	47 95       	ror	r20

00000930 <__fp_splitA>:
 930:	88 0f       	add	r24, r24
 932:	97 fb       	bst	r25, 7
 934:	99 1f       	adc	r25, r25
 936:	61 f0       	breq	.+24     	; 0x950 <__fp_splitA+0x20>
 938:	9f 3f       	cpi	r25, 0xFF	; 255
 93a:	79 f0       	breq	.+30     	; 0x95a <__fp_splitA+0x2a>
 93c:	87 95       	ror	r24
 93e:	08 95       	ret
 940:	12 16       	cp	r1, r18
 942:	13 06       	cpc	r1, r19
 944:	14 06       	cpc	r1, r20
 946:	55 1f       	adc	r21, r21
 948:	f2 cf       	rjmp	.-28     	; 0x92e <__fp_split3+0xe>
 94a:	46 95       	lsr	r20
 94c:	f1 df       	rcall	.-30     	; 0x930 <__fp_splitA>
 94e:	08 c0       	rjmp	.+16     	; 0x960 <__fp_splitA+0x30>
 950:	16 16       	cp	r1, r22
 952:	17 06       	cpc	r1, r23
 954:	18 06       	cpc	r1, r24
 956:	99 1f       	adc	r25, r25
 958:	f1 cf       	rjmp	.-30     	; 0x93c <__fp_splitA+0xc>
 95a:	86 95       	lsr	r24
 95c:	71 05       	cpc	r23, r1
 95e:	61 05       	cpc	r22, r1
 960:	08 94       	sec
 962:	08 95       	ret

00000964 <__fp_zero>:
 964:	e8 94       	clt

00000966 <__fp_szero>:
 966:	bb 27       	eor	r27, r27
 968:	66 27       	eor	r22, r22
 96a:	77 27       	eor	r23, r23
 96c:	cb 01       	movw	r24, r22
 96e:	97 f9       	bld	r25, 7
 970:	08 95       	ret

00000972 <__mulsf3>:
 972:	0b d0       	rcall	.+22     	; 0x98a <__mulsf3x>
 974:	c4 cf       	rjmp	.-120    	; 0x8fe <__fp_round>
 976:	b5 df       	rcall	.-150    	; 0x8e2 <__fp_pscA>
 978:	28 f0       	brcs	.+10     	; 0x984 <__mulsf3+0x12>
 97a:	ba df       	rcall	.-140    	; 0x8f0 <__fp_pscB>
 97c:	18 f0       	brcs	.+6      	; 0x984 <__mulsf3+0x12>
 97e:	95 23       	and	r25, r21
 980:	09 f0       	breq	.+2      	; 0x984 <__mulsf3+0x12>
 982:	a6 cf       	rjmp	.-180    	; 0x8d0 <__fp_inf>
 984:	ab cf       	rjmp	.-170    	; 0x8dc <__fp_nan>
 986:	11 24       	eor	r1, r1
 988:	ee cf       	rjmp	.-36     	; 0x966 <__fp_szero>

0000098a <__mulsf3x>:
 98a:	ca df       	rcall	.-108    	; 0x920 <__fp_split3>
 98c:	a0 f3       	brcs	.-24     	; 0x976 <__mulsf3+0x4>

0000098e <__mulsf3_pse>:
 98e:	95 9f       	mul	r25, r21
 990:	d1 f3       	breq	.-12     	; 0x986 <__mulsf3+0x14>
 992:	95 0f       	add	r25, r21
 994:	50 e0       	ldi	r21, 0x00	; 0
 996:	55 1f       	adc	r21, r21
 998:	62 9f       	mul	r22, r18
 99a:	f0 01       	movw	r30, r0
 99c:	72 9f       	mul	r23, r18
 99e:	bb 27       	eor	r27, r27
 9a0:	f0 0d       	add	r31, r0
 9a2:	b1 1d       	adc	r27, r1
 9a4:	63 9f       	mul	r22, r19
 9a6:	aa 27       	eor	r26, r26
 9a8:	f0 0d       	add	r31, r0
 9aa:	b1 1d       	adc	r27, r1
 9ac:	aa 1f       	adc	r26, r26
 9ae:	64 9f       	mul	r22, r20
 9b0:	66 27       	eor	r22, r22
 9b2:	b0 0d       	add	r27, r0
 9b4:	a1 1d       	adc	r26, r1
 9b6:	66 1f       	adc	r22, r22
 9b8:	82 9f       	mul	r24, r18
 9ba:	22 27       	eor	r18, r18
 9bc:	b0 0d       	add	r27, r0
 9be:	a1 1d       	adc	r26, r1
 9c0:	62 1f       	adc	r22, r18
 9c2:	73 9f       	mul	r23, r19
 9c4:	b0 0d       	add	r27, r0
 9c6:	a1 1d       	adc	r26, r1
 9c8:	62 1f       	adc	r22, r18
 9ca:	83 9f       	mul	r24, r19
 9cc:	a0 0d       	add	r26, r0
 9ce:	61 1d       	adc	r22, r1
 9d0:	22 1f       	adc	r18, r18
 9d2:	74 9f       	mul	r23, r20
 9d4:	33 27       	eor	r19, r19
 9d6:	a0 0d       	add	r26, r0
 9d8:	61 1d       	adc	r22, r1
 9da:	23 1f       	adc	r18, r19
 9dc:	84 9f       	mul	r24, r20
 9de:	60 0d       	add	r22, r0
 9e0:	21 1d       	adc	r18, r1
 9e2:	82 2f       	mov	r24, r18
 9e4:	76 2f       	mov	r23, r22
 9e6:	6a 2f       	mov	r22, r26
 9e8:	11 24       	eor	r1, r1
 9ea:	9f 57       	subi	r25, 0x7F	; 127
 9ec:	50 40       	sbci	r21, 0x00	; 0
 9ee:	8a f0       	brmi	.+34     	; 0xa12 <__mulsf3_pse+0x84>
 9f0:	e1 f0       	breq	.+56     	; 0xa2a <__mulsf3_pse+0x9c>
 9f2:	88 23       	and	r24, r24
 9f4:	4a f0       	brmi	.+18     	; 0xa08 <__mulsf3_pse+0x7a>
 9f6:	ee 0f       	add	r30, r30
 9f8:	ff 1f       	adc	r31, r31
 9fa:	bb 1f       	adc	r27, r27
 9fc:	66 1f       	adc	r22, r22
 9fe:	77 1f       	adc	r23, r23
 a00:	88 1f       	adc	r24, r24
 a02:	91 50       	subi	r25, 0x01	; 1
 a04:	50 40       	sbci	r21, 0x00	; 0
 a06:	a9 f7       	brne	.-22     	; 0x9f2 <__mulsf3_pse+0x64>
 a08:	9e 3f       	cpi	r25, 0xFE	; 254
 a0a:	51 05       	cpc	r21, r1
 a0c:	70 f0       	brcs	.+28     	; 0xa2a <__mulsf3_pse+0x9c>
 a0e:	60 cf       	rjmp	.-320    	; 0x8d0 <__fp_inf>
 a10:	aa cf       	rjmp	.-172    	; 0x966 <__fp_szero>
 a12:	5f 3f       	cpi	r21, 0xFF	; 255
 a14:	ec f3       	brlt	.-6      	; 0xa10 <__mulsf3_pse+0x82>
 a16:	98 3e       	cpi	r25, 0xE8	; 232
 a18:	dc f3       	brlt	.-10     	; 0xa10 <__mulsf3_pse+0x82>
 a1a:	86 95       	lsr	r24
 a1c:	77 95       	ror	r23
 a1e:	67 95       	ror	r22
 a20:	b7 95       	ror	r27
 a22:	f7 95       	ror	r31
 a24:	e7 95       	ror	r30
 a26:	9f 5f       	subi	r25, 0xFF	; 255
 a28:	c1 f7       	brne	.-16     	; 0xa1a <__mulsf3_pse+0x8c>
 a2a:	fe 2b       	or	r31, r30
 a2c:	88 0f       	add	r24, r24
 a2e:	91 1d       	adc	r25, r1
 a30:	96 95       	lsr	r25
 a32:	87 95       	ror	r24
 a34:	97 f9       	bld	r25, 7
 a36:	08 95       	ret

00000a38 <__umulhisi3>:
 a38:	a2 9f       	mul	r26, r18
 a3a:	b0 01       	movw	r22, r0
 a3c:	b3 9f       	mul	r27, r19
 a3e:	c0 01       	movw	r24, r0
 a40:	a3 9f       	mul	r26, r19
 a42:	70 0d       	add	r23, r0
 a44:	81 1d       	adc	r24, r1
 a46:	11 24       	eor	r1, r1
 a48:	91 1d       	adc	r25, r1
 a4a:	b2 9f       	mul	r27, r18
 a4c:	70 0d       	add	r23, r0
 a4e:	81 1d       	adc	r24, r1
 a50:	11 24       	eor	r1, r1
 a52:	91 1d       	adc	r25, r1
 a54:	08 95       	ret

00000a56 <_exit>:
 a56:	f8 94       	cli

00000a58 <__stop_program>:
 a58:	ff cf       	rjmp	.-2      	; 0xa58 <__stop_program>
